#!/bin/bash

################################################################################
# ppp_stat
#
# Prints NIC statistics from /proc/net/dev for MRTG
# Defaults to ppp[0-9] but takes a parameter as well
# Prints
# <rx_bytes (in)>
# <tx_bytes (out)>
# [<uptime>|<error_message>]
# <short_hostname>
#
# Using SNMP for ppp0 was unreliable because as the interface is dropped and
# activated again the PPP entries would get multiplicated
#
# WS 20100224
################################################################################
########## Changes ##########
####
# Minor improvements
# WS 20110415
####
# Moved external operations to internal operations
# WS 2011116
####

RC=0
RESULT=
AWK="/bin/awk"

# Check for parameters
if [[ $# = 0 ]]; then
	INTERFACE="ppp[0-9]"
else
	INTERFACE="$1"
fi

# Print a neat human readable uptime
uptm () {

local T=$(cat /proc/uptime)
local DAY=days
local HOUR=hours
local MIN=minutes
local H=
local D=
local M=

# Uptime in fraction of days for MRTG
T=${T%%.*}
D=$((T/86400))
if [[ $D = 1 ]]; then
        DAY=day
fi

T=$((T%86400))
H=$(($T/3600))
if [[ $H = 1 ]]; then
        HOUR=hour
fi

T=$((T%3600))
M=$(($T/60))
if [[ $M = 1 ]]; then
        MIN=minute
fi

echo "$D $DAY, $H $HOUR and $M $MIN"
}

# Get statistics
RESULT=$($AWK '/'"$INTERFACE"'/ {print $2,$10}' /proc/net/dev)

# Check for errors
if [[ -n "$RESULT" ]]; then
	if [[ ${RESULT} =~ ^[0-9]+\ +[0-9]+$ ]]; then
		echo -e ${RESULT// /\\n}
		uptm
	else
		echo -e "0\n0\nError: Something is wrong with the result ($RESULT), I expected two integers"
		RC=1
	fi
		
else
	echo -e "0\n0"
	uptm
fi
hostname -s

exit $RC

# EOF
