#!/bin/bash

################################################################################
# normalise_csv
#
# Fill up lines with missing fields in CSV files
#
# WS 20170323
################################################################################


COUNTER=0
NUMBER=0
TMPFILE="${FILE}.$$.tmp"
MY_NAME=${0##*/}
unset APPEND AUTO DELIMITER NUMBER NUMBER_MAX FILE REPLACE

usage_() {

cat <<-EOH

	$MY_NAME adds missing (empty) fields to CSV files

	Usage:      $MY_NAME [-a|-n <number>] [-d <delimiter>] -f <file_name>

	Parameters: -a|--auto
	               Set number of fields to longest line
	            -n|--number [0-9]+
	               Set number of fields
	            -d|--delimiter <delimiter>
	               Set delimiter (default: ";")
	            -f|--file <file>
	               File name
	            -r|--replace
	               Overwrite the original file instead of creating a new one
	            -h|--help
	               Print this help page

	Examples:   $MY_NAME -f <file_name>
	                - Set all lines to the maximum number of fields found and write result to <file_name>_tmp.<ext>

	            $MY_NAME --file=<file_name> -r --number 10 -d ','
	                - Set all lines to 10 fields and overwrite original

EOH
}

DELIMITER=${DELIMITER:-';'}

# Check input
if [[ $# -lt 2 ]]; then
	echo "Error: Need more input" >&2
	usage_ >&2
	exit 1
else
	if [[ ${1:0:1} != - ]]; then
		echo "Error: Could not parse parameters" >&2
		usage_ >&2
		exit 1
	fi
fi

# Get command line options
OPTIONS_LONG="help,auto,replace,delimiter:,file:,number:"
OPTIONS_SHORT="hard:f:n:"
if ! PARSED_OPTIONS=$(getopt -n "$MY_NAME" -o "$OPTIONS_SHORT" -l "$OPTIONS_LONG" -- "$@"); then
        usage_ >&2
	exit 1
fi

OPTERR=0
eval set -- "$PARSED_OPTIONS"

while  [[ $# -ge 1 ]]; do
	case $1 in
		-h|--help)
			usage_
			exit
			;;
		-a|--auto)
			AUTO=1 ;;
		-n|--number)
			NUMBER=$2
			if ! egrep -q '^[0-9]+$' <<<"$NUMBER"; then
				echo "Error: -n only takes numbers" >&2
				usage_ >&2
				exit 1
			fi
			NUMBER=$((NUMBER -1))
			shift
			;;
		-f|--file)
			FILE=$2
			shift
			;;
		-d|--delimiter)
			DELIMITER=$2
			shift
			;;
		-r|--replace)
			REPLACE=1
	esac
	shift
done

# Find line with the most fields
find_max() {
local DELIM_TMP

while read LINE; do
	[[ -z "$LINE" ]] && continue
	DELIM_TMP=($(grep -o "$DELIMITER" <<<"$LINE"))
	[[ ${#DELIM_TMP[*]} -gt $NUMBER ]] && NUMBER_MAX=${#DELIM_TMP[*]}
done < "$FILE"

if [[ ! $NUMBER_MAX -gt 0 ]]; then
	echo "Error: Could not find delimiter" >&2
	exit 1
fi
}

## Pre-check for errors
if [[ -z "$FILE" ]]; then
	echo 'Error: No file name given' >&2
	usage_ >&2
	exit 1
fi
if [[ ! -e "$FILE" ]]; then
	echo "Error: Could not read $FILE" >&2
	exit 1
fi

if [[ ${#DELIMITER} != 1 ]]; then
	echo 'Error: -d accepts only single characters and no umlauts' >&2
	exit 1
fi

find_max

if [[ $AUTO == 1 ]]; then
	if [[ -n "$NUMBER" ]]; then
		echo 'Warning: -a will be ignored because you also specified -n' >&2
	else
		NUMBER=$NUMBER_MAX
	fi

fi
# Default to "auto"
if [[ -z "$AUTO" && -z "$NUMBER" ]]; then
	NUMBER=$NUMBER_MAX
else
	if [[ $NUMBER -lt $NUMBER_MAX ]]; then
		echo "Error: # of fields was set to $((NUMBER +1)), but the longest line has $((NUMBER_MAX + 1)) fields" >&2
		exit 1
	fi
fi

echo "All lines will be normalised to $((NUMBER + 1)) fields"

# Here we go
while read LINE; do
	[[ -z "$LINE" ]] && continue
	((COUNTER++))
	DELIM=($(grep -o "$DELIMITER" <<<"$LINE"))
	DIFF=$((NUMBER - ${#DELIM[*]}))
	if [[ $DIFF -gt 0 ]]; then
		SUBCOUNTER=0
		while ((SUBCOUNTER < DIFF)); do
			APPEND+="$DELIMITER"
			((SUBCOUNTER++))
		done
	fi
	if ! echo "$LINE$APPEND" >> "$TMPFILE"; then
		echo "Error: Could not write to temporary file $TMPFILE" >&2
		exit 1
	fi
	unset APPEND DELIM DIFF
done < "$FILE"

if grep -q '\.' <<<"$FILE"; then
	FILE_NEW="${FILE%.*}_new.${FILE##*.}"
else
	FILE_NEW="${FILE}_new"
fi
if [[ $REPLACE == 1 ]]; then
	if mv "$TMPFILE" "$FILE"; then
		echo "The normalised result has been written to the original file"
	else
		echo "Error: Could not write to original file, the result has been written to $TMPFILE" >&2
		exit 1
	fi
else
	if mv "$TMPFILE" "$FILE_NEW"; then
		echo "The normalised result has been written to $FILE_NEW"
	else
		echo "Error: Could not rename temporary file, the result has been written to $TMPFILE" >&2
		exit 1
	fi
fi

exit

# EOF
