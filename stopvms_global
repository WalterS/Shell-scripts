#!/bin/bash

############################################################
# stopvms_global
# Stops any running virtual machine started by VirtualBox
# Needs root rights
#
# Returncode > 0  : VM(s) had been shut down forcibly
# Returncode > 100: VM(s) could not shut down
#
# WS 20110331
############################################################
########## Changes ##########
# VM names with (multiple) spaces in name are handled
# correctly now
# WS 20110401
####


# Full path to VBoxManage
vboxmanage=/usr/bin/VBoxManage


# Make sure we're run with root rights
if [ "$(id -u)" != "0" ]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

if ! [ -x "`which $vboxmanage 2>/dev/null`" ]; then
	echo "Could not find VBoxManage" 1>&2
	exit 1
fi

IFS=$'\n'
rc=0
runningvms=
vm=
pid=
user=
name=
uid=


# Get list of running VMs
# and validate UID: [a-z|0-9]{8}-([a-z|0-9]{4}-){3}[a-z|0-9]{8}
runningvms=$(ps -ef | awk --re-interval '(/--startvm/ && /--comment/ && $8 !~/^awk$/) && $0~/--startvm[ |\s][a-z|0-9]{8}-([a-z|0-9]{4}-){3}[a-z|0-9]{8}/')

if [ "$runningvms" == "" ]; then
	echo "Nothing to do"
	exit 0
fi

for vm in $runningvms; do
	# Extract process ID (PID), user name, VM name, and VM UID
	pid=$(echo $vm | awk '{print $2}')
	user=$(echo $vm | awk '{print $1}')
	name=$(echo $vm | awk -F'--comment | --startvm ' '{print "\""$2"\""}')
	uid=$(echo $vm | awk -F'[[:space:]]+--|startvm[[:space:]]+' '{print $4}')

	# Running escalated shutdown tries, from saving state to killing process
	# Each successful but escalated shutdown increases the error counter by 1,
	# each failed shutdown increases the error counter by 100
	echo "Stopping VM \"$name\""
	# Try to save the state of the VM
	su - $user -c "$vboxmanage controlvm $uid savestate" 2> /dev/null
	if [ $? -ne 0 ]; then
		# Try ACPI shutdown
		echo "Could not save VM \"$name\", trying ACPI shutdown" 1>&2
		su - $user -c "$vboxmanage controlvm $uid acpipowerbutton" 2> /dev/null
		if [ $? -ne 0 ]; then
			# Try poweroff
			echo "ACPI shutdown for VM \"$name\" failed, trying poweroff" 1>&2
			su - $user -c "$vboxmanage controlvm $uid poweroff" 2> /dev/null
			if [ $? -ne 0 ]; then
				# Last resort: kill process
				echo "Poweroff for VM \"$name\" failed, killing process" 1>&2
				kill -9 $pid 2> /dev/null
				if [ $? -ne 0 ]; then
					rc=$((rc+100))
					echo "Error: Could not stop VM \"$name\", UID=$uid, PID=$pid" 1>&2
				else
					((rc++))
					echo "Killed VM \"$name\", PID $pid"
				fi
			
			else
				((rc++))
				echo "Poweroff of VM \"$name\" successful"
			fi
		else
			((rc++))
			echo "ACPI shutdown of VM \"$name\" successful"
		fi
	else
		echo "Saved state of VM \"$name\""
	fi
done

exit $rc

# EOF
