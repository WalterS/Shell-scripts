#!/bin/bash

############################################################
# stopvms
# Stops all VMs started by VirtualBox in the context
# of the current user if executed as normal user and
# stops any VM if executed as root
#
# WS 20110407
############################################################

# Where is our executable?
if ! VBOXMANAGE=/usr/bin/VBoxManage; then
	echo "Error: Could not find /usr/bin/VBoxManage">&2
	exit 1
fi

IFS=$'\n'
RC=0
ROOT=0
VMS=
VM=
NAME=
VMID=

if ! [[ -x "$(which $VBOXMANAGE 2>/dev/null)" ]]; then
	echo "Error: Could not find command VBoxManage">&2
	exit 1
fi

# Function for escalated shutdown
switchoff_ (){

for VM in $VMS; do
	local NAME=$(awk '{print $1}'<<<$VM)
	local VMID=$(awk '{print $NF}'<<<$VM)
	echo "Shutting down $NAME"

	# Construct command line:
	# If we're run as root, we need to execute $VBOXMANAGE with su
	if [[ $ROOT = 1 ]]; then
		local SAVESTATE="su - $USER -c \"$VBOXMANAGE controlvm $VMID savestate\""
		local ACPI="su - $USER -c \"$VBOXMANAGE controlvm $VMID acpipowerbutton\""
		local POWEROFF="su - $USER -c \"$VBOXMANAGE controlvm $VMID poweroff\""
	else
		local SAVESTATE="$VBOXMANAGE controlvm $VMID savestate"
		local ACPI="$VBOXMANAGE controlvm $VMID acpipowerbutton"
		local POWEROFF="$VBOXMANAGE controlvm $VMID poweroff"
	fi
	# Running escalated shutdown tries, from saving state to poweroff
	# "eval" is needed because our command string contains quotes
	if ! eval $SAVESTATE 2> /dev/null; then
		echo "Could not save state of VM $NAME, trying ACPI shutdown" >&2
		if ! eval $ACPI 2> /dev/null; then
			echo "ACPI shutdown for VM $NAME failed, trying poweroff" >&2
			if ! eval $POWEROFF 2> /dev/null; then
				echo "Error: Could not shut down VM $NAME, UID $VMID" >&2
				((RC++))
			else
				echo "Poweroff of VM $NAME successful"
			fi
		else
			echo "ACPI shutdown of VM $NAME successful"
		fi
	else
		echo "Saved state of VM $NAME"

	fi
done
}

# Check for root rights
if [[ "$(id -u)" != "0" ]]; then
	# Get list of running VMs
	VMS=$($VBOXMANAGE list runningvms | awk -F' +|{|}' '{print $1,$(NF-1)}' 2>/dev/null)
	if [[ -z "$VMS" ]]; then
		echo "Nothing to do"
		exit 0
	else
		switchoff_
	fi
else
	ROOT=1
	# Search for users running VMs
	USERS=$(ps -ef | awk '(/VBoxHeadless/ || /VirtualBox/) && /-startv[m]/ {print $1}' | sort -u)
	if [[ -z "$USERS" ]]; then
		echo "Nothing to do"
		exit 0
	else
		# List VMs run by $USER
		for USER in $USERS ; do
			VMS=$(su - $USER -c "$VBOXMANAGE list runningvms" | awk -F' +|{|}' '{print $1,$(NF-1)}' 2>/dev/null)
			if [[ -n "$VMS" ]]; then
				echo "Stopping VMs for user ${USER}:"
				switchoff_
			fi
		done
	fi
fi

exit $RC

# EOF
