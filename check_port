#!/bin/bash

################################################################################
# check_port
# 
# Checks if a given TCP/UDP port is open
#
# WS 20110823
################################################################################
########## Changes ##########
# Added test for port range, fixed identation
# WS 20110823
####


my_name=$(basename $0)
port=
host=
proto=
proto_display=

usage () {
cat <<END

$my_name checks for open TCP/UDP ports
Usage:     $my_name -h <hostname> -p <prot_number> -s [tcp|udp]
Example:   $my_name -h localhost -p "22 25" -s tcp 
           Check if ports 22 (SSH) and 25 (SMTP) are open on localhost

Ports are expected either as single value, separated by blanks or two values separated by hyphen
You have to be root to execute this script
END
}

# Make sure we're run by root
if [ "$(id -u)" != "0" ]; then
	echo "This script must be run as root" >&2
	exit 1
fi

# Check input
OPTERR=0
while getopts  "h:p:s:" flag; do
	case $flag in
		h)
			host="$OPTARG" ;;
		p)
			port="$OPTARG" ;;
		s)	proto=$(echo "$OPTARG" | tr [[:upper:]] [[:lower:]])
			if [ "$proto" != "tcp" -a "$proto" != "udp" ]; then
				echo "Error: Invalid protocol, either specify \"tcp\" or \"udp\"" >&2
				usage >&2
				exit 1
			else
				proto_display=$(echo $proto | tr [[:lower:]] [[:upper:]])
			fi ;;
		*)
			echo "Error: Wrong parameter" >&2
			usage >&2
			exit 1 ;;
	esac
done

if [ -z "$host" -o -z "$port" -o -z "$proto" ]; then
	echo "Error: Need more input" >&2
	usage >&2
	exit 1
fi

# Check for port list
# Ports are expected either as single value, separated by blank or two values separated by hyphen

# Remove trailing blanks
port=$(echo $port | sed 's/ +$//')
if ! echo $port | egrep -q '^([1-9]( |-)?)*[0-9]$'; then
	port_format_error
fi

# Only one hyphen allowed
if echo $port | egrep -q '\-.*-.*'; then
	echo "Error: More than one hyphen in port list" >&2
	usage >&2
	exit 1
else
	# No mixing of hyphen and blanks
	if echo $port | egrep -q '\-.*( ).*|( ).*-.*'; then
		echo "Error: Hyphen and blank in port list" >&2
		usage >&2
		exit 1
	fi
fi

# Second value in port range has to be greater than first value
if echo $port | egrep -q '\-'; then
	if ! echo $port | awk -F'-' '{if ($1>=$2) exit 1}' &> /dev/null; then
		echo "Error: First value in port range is greater or equal than second value" >&2
		usage >&2
		exit 1
	else
		# Build list argument
		port_list=$(echo $port | awk -F'-' '{print "{"$1".."$2"}"}')
	fi
else
	port_list="$port"
fi

#### Here we go
# Only with eval we're able to use range argument in variable
for p in `eval echo $port_list`; do

	if (echo >/dev/tcp/${host}/$p) &>/dev/null; then
		echo "$proto_display port $p on $host is open"
	else
		echo "$proto_display port $p on $host is closed"
	fi

done

exit 0

# EOF
