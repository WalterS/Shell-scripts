#!/bin/bash

################################################################################
# check_port
#
# Checks if a given TCP/UDP port is open using Bash sockets
#
# WS 20110823
################################################################################

MY_NAME=${0##*/}
PORT=22
HOST=127.0.0.1
PROTO=tcp
PROTO_DISPLAY=
RC=0

usage () {
cat <<END

$MY_NAME checks for open TCP/UDP ports
Usage:      $MY_NAME -H <hostname> -p <port_number> -t [tcp|udp]
Parameters: -H|--host
               Host name or IP address (default: 127.0.0.1)
            -p|--port
               Either a single port, a list with blanks as delimiters or a range in the format "n-n" (default: 22)
            -t|--protocol
               tcp or udp (default: tcp)
Example:    $MY_NAME -H localhost --port="22 25"
            Check if ports 22 (SSH) and 25 (SMTP) are open on localhost

Ports are expected either as single value, separated by blanks or two values separated by hyphen
END
}

# Check input
# Get command line options
OPTIONS_LONG="help,host:,protocol:,port:"
OPTIONS_SHORT="h:p:s:"
if ! PARSED_OPTIONS=$(getopt -qn "$0" -o "$OPTIONS_SHORT" -l "$OPTIONS_LONG" -- "$@"); then
	echo "Error: Invalid option"
	usage >&2
	exit 2
fi
OPTERR=0
eval set -- "$PARSED_OPTIONS"

while [[ $# -ge 1 ]]; do
	case $1 in
		--help)
			usage
			exit 0 ;;
		-h|--host)
			HOST="$2"; shift ;;
		-p|--port)
			PORT="$2"; shift ;;
		-t|--protocol)	PROTO=$(tr '[:upper:]' '[:lower:]' <<<"$2")
			if [[ "$PROTO" != "tcp" && "$PROTO" != "udp" ]]; then
				echo "Error: Invalid protocol, either specify \"tcp\" or \"udp\"" >&2
				usage >&2
				exit 2
			fi; shift ;;
		--)
			break ;;
		*)
			echo "Error: Wrong parameter $1" >&2
			usage >&2
			exit 2 ;;
        esac
        shift
done


if [[ -z "$HOST" || -z "$PORT" || -z "$PROTO" ]]; then
	echo "Error: Need more input" >&2
	usage >&2
	exit 2
fi


# Remove trailing blanks
PORT=$(echo "$PORT")
# Only numbers, blanks and hyphen allowed
if [[ ! $PORT =~ ^([1-9]+( |-)?)*[0-9]+$ ]]; then
	echo "Error: Only numbers, blanks and hyphen allowed in port value" >&2
	usage >&2
	exit 2
fi

# Check for port list
# Ports are expected either as single value, separated by blank or two values separated by hyphen
# Only one hyphen allowed
if [[ $PORT =~ -.*-.* ]]; then
	echo "Error: More than one hyphen in port list" >&2
	usage >&2
	exit 2
else
	# No mixing of hyphen and blanks
	if [[ $PORT =~ -.*( ).*|( ).*-.* ]]; then
		echo "Error: Hyphen and blank in port list" >&2
		usage >&2
		exit 2
	fi
fi

# Second value in port range has to be greater than first value
if [[ $PORT =~ - ]]; then
	if ! awk -F'-' '{if ($1>=$2) exit 2}' &> /dev/null <<<"$PORT"; then
		echo "Error: First value in port range is greater or equal than second value" >&2
		usage >&2
		exit 2
	else
		# Build list argument
		PORT_LIST=$(awk -F'-' '{print "{"$1".."$2"}"}' <<<"$PORT")
	fi
else
	PORT_LIST="$PORT"
fi

#### Here we go
PROTO_DISPLAY=$(tr '[:lower:]' '[:upper:]' <<<"$PROTO")
# Only with eval we're able to use range argument in variable
for P in $(eval echo "$PORT_LIST"); do

	if (echo >"/dev/tcp/${HOST}/$P") &>/dev/null; then
		echo "$PROTO_DISPLAY port $P on $HOST is open"
	else
		echo "$PROTO_DISPLAY port $P on $HOST is closed"
		RC=1
	fi

done

exit $RC

# EOF
