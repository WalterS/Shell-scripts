#!/bin/bash

############################################################
# check_cpu_snmp
#
# Get overall CPU load in percent by SNMP for mrtg
#
# WS 20160124
############################################################

MY_NAME=${0##*/}

# Purge environment
IFS=$'\n'
unalias -a
for VAR in $(env | awk -F= 'BEGIN {IGNORECASE=1} ! /^(path|user|home|display|ifs)/ {print $1}'); do
	unset "$VAR" &>/dev/null
done
unset IFS VAR

# Set SNMP search strings
# hrProcessorLoad
SNMP_PROCS='.1.3.6.1.2.1.25.3.3.1.2'
# hrSystemUptime
SNMP_UPTIME='.1.3.6.1.2.1.25.1.1'

# Print help
usage () {
cat <<END

$MY_NAME prints overall CPU load in percent for mrtg

Parameters: -c|--community
               SNMP v2c community string
            -s|--server
              Target host, use IP address or FQDN
            -n|--name
              Display different name (optional)
            -h|--help
              This help text

Example:    $MY_NAME -c public -s host.example.com

END
}

# Check input
OPTIONS_LONG="community:,server:,name:,help"
OPTIONS_SHORT="c:,s:,n:,h"
if ! PARSED_OPTIONS=$(getopt -n "$MY_NAME" -o "$OPTIONS_SHORT" -l "$OPTIONS_LONG" -- "$@"); then
	echo "Error: Wrong or missing option" >&2
	usage >&2
	exit 2
fi

eval set -- "$PARSED_OPTIONS"

while [[ $# -ge 1 ]]; do
	case $1 in
		-c|--community)
			COMMUNITY=$(echo $2) ;;
		-s|--server)
			HOST=$(echo $2) ;;
		-n|--name)
			DISPLAY_NAME=$(echo $2) ;;
		-h|--help)
			usage; exit ;;
		--) break ;;
	esac
	shift 2
done

for VAR in COMMUNITY HOST; do
	if [[ -z "$(eval echo \$$VAR)" ]]; then
		echo "Error: $VAR not set" >&2
		usage >&2
		exit 1
	fi
done

# Print error
print_error () {
echo -e "0\n0\nError: $*"
exit 1
}

# Only one connection to target host
IFS=$'\n'
if ! SNMP_ALL=( $(snmpbulkget -v 2c -c "$COMMUNITY" -Osn "$HOST" "$SNMP_PROCS" "$SNMP_UPTIME") ); then
	echo "Error: SNMP connect failed" >&2
	exit 1
fi

# Parse SNMP response
for LINE in "${SNMP_ALL[@]}"; do
	case $LINE in
		${SNMP_PROCS}.*)
			(( PROC_NUM++ ))
			[[ "${LINE##* }" =~ ^[0-9]+\.?[0-9]*$ ]] || print_error "Expected a number, got \"$LINE\""
			let LOAD="LOAD + ${LINE##* }"
		;;
		${SNMP_UPTIME}.*)
			UPTIME=${LINE##*) }
			UPTIME=${UPTIME%.*}
		;;
	esac
done

# Error handling
[[ "$PROC_NUM" -eq 0 ]] && print_error "No CPUs found"

bc -l<<<"scale=2;$LOAD / $PROC_NUM" || print_error "Could not execute \"bc -l\" with \"scale=2;$LOAD / $PROC_NUM\""
echo -e "0\n$UPTIME\n${DISPLAY_NAME:-$HOST}"

