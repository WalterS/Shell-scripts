#!/bin/bash

############################################################
# check_snmp_cpu
#
# Get overall CPU load in percent by SNMP for mrtg
#
# WS 20160124
############################################################

MY_NAME=${0##*/}

# Purge environment
IFS=$'\n'
unalias -a
for VAR in $(env | awk -F= 'BEGIN {IGNORECASE=1} ! /^(path|user|home|display|ifs)/ {print $1}'); do
	unset $VAR &>/dev/null
done
unset IFS VAR

# Print help
usage () {
cat <<END

$MY_NAME prints overall CPU load in percent for mrtg

Parameters: -c|--community
               snmp v2c community string
            -s|--server
              target host, use IP address or FQDN
            -n|--name
              Display different name (optional)
            -h|--help
              this help text

Example:    $MY_NAME -c public -s host.example.com

END
}

# Check input
OPTIONS_LONG="community:,server:,name:,help"
OPTIONS_SHORT="c:,s:,n:,h"
if ! PARSED_OPTIONS=$(getopt -n $MY_NAME -o "$OPTIONS_SHORT" -l "$OPTIONS_LONG" -- "$@"); then
	echo "Error: Wrong or missing option" >&2
	usage >&2
	exit 2
fi

eval set -- "$PARSED_OPTIONS"

while [[ $# -ge 1 ]]; do
	case $1 in
		-c|--community)
			COMMUNITY=$(echo $2) ;;
		-s|--server)
			HOST=$(echo $2) ;;
		-n|--name)
			DISPLAY_NAME=$(echo $2) ;;
		-h|--help)
			usage; exit ;;
		--) break ;;
	esac
	shift 2
done

for VAR in COMMUNITY HOST; do
	if [[ -z "$(eval echo \$$VAR)" ]]; then
		echo "Error: $VAR not set" >&2
		usage >&2
		exit 1
	fi
done

# Print error
print_error () {
echo -e "0\n0\nError: $*"
exit 1
}

# Only one connection to target host
IFS=$'\n'
if ! SNMP_ALL=( $(snmpbulkget -v 2c -c $COMMUNITY $HOST -Os hrProcessor hrSystemUptime) ); then
	echo "Error: SNMP connect failed" >&2
	exit 1
fi

# Get load for each CPU and dived by numbers of CPUs
getload () {
local LINE LOAD PROCS=0 IFS=$'\n'
for LINE in ${SNMP_ALL[@]}; do
	if [[ "$LINE" =~ "hrProcessorLoad" ]]; then
		LINE=${LINE##* }
		# Throw error if not an integer
		if ! (echo $[LINE / LINE]) &>/dev/null; then
			print_error "Function ${FUNCNAME[0]}: Expected an integer, got \"$LINE\""
		fi
		LOAD=$[LOAD + LINE]
		(( PROCS++ ))
	fi
done
[[ $PROCS -eq 0 ]] && print_error "No CPUs found"
echo $[LOAD / PROCS ]
}

# Get uptime
uptime_ () {
local LINE IFS=$'\n' UPTIME
for LINE in ${SNMP_ALL[@]}; do
	if [[ "$LINE" =~ hrSystemUptime ]]; then
		UPTIME=${LINE##*) }
		UPTIME=${UPTIME%.*}
	fi
done
echo $UPTIME
}

LOAD=$(getload)

# Print output
cat <<-EOM
	$LOAD
	0
	$(uptime_)
	${DISPLAY_NAME:-$HOST}
EOM

