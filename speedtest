#!/bin/bash

############################################################
# speedtest
#
# Test network speed with wget
#
# WS 20151229
############################################################

# Defaults
DEFAULT_SITE='http://static.panoramio.com/photos/1920x1280/84052337.jpg'
ITERATIONS_DEFAULT=1
WGET_PARAMS="--ignore-length --no-check-certificate --no-cache -O /dev/null"

# Sanitise environment
IFS=$'\n'
for VAR in $(env | awk -F= 'BEGIN {IGNORECASE=1} ! /^(path|user|home|display|ifs)/ {print $1}'); do
	unset $VAR
done
unset IFS

# Check sanity
if [[ "${BASH_VERSION%%.*}" -lt 4 || -z "$BASH_VERSION" ]]; then
	echo "Error: We need Bash version 4 or higher, can't continue" >&2
	exit 1
fi
for PRG in bc wget awk; do
	if ! which $PRG &>/dev/null; then
		echo "Error: Could not find ${PRG}, can't continue" >&2
		exit 1
	fi
done

MY_NAME=${0##*/}

# Units lookup table: associative array
declare -rA MAG=(
[n]=0
[k]=1
[K]=1
[m]=2
[M]=2
[g]=3
[G]=3
)

# Print help text
usage (){
cat <<END

$MY_NAME downloads a website with wget and measures mean speed over given iterations

Parameters: -b|--bytes
                   Use bytes/second instead of bits/second
            -h|--help
                   Print this help text
            -p|--proxy <proxy:port>
                   Use a proxy
            -q|--quiet
                   Print result only
            -r|--repeats <n>
                   How often to test for mean speed (default: $ITERATIONS_DEFAULT)
            -s|--site <url>
                   URL (default: $DEFAULT_SITE)
            -u|--unit [n|k|m|g]
                   Use unit ([none|ki|Mi|Gi]) i.g. Mb/s

All parameters are optional

Examples:    $MY_NAME -r 5
                   Test speed to $DEFAULT_SITE, use five iterations for computing mean speed

             $MY_NAME -p http://proxy.xx:8080 --quiet --site=https://example.com --unit n
                   Test speed to https://stackoverflow.com via proxy proxy.xx:8080 and print the result in bits/second only

END
}

# Check input
OPTIONS_LONG="proxy:,repeats:,site:,unit:,bytes,quiet,help"
OPTIONS_SHORT="p:,r:,s:,u:,b,q,h"
if ! PARSED_OPTIONS=$(getopt -n $MY_NAME -o "$OPTIONS_SHORT" -l "$OPTIONS_LONG" -- "$@"); then
	usage >&2
	exit 2
fi

eval set -- "$PARSED_OPTIONS"

while [[ $# -ge 1 ]]; do
	case $1 in
		-b|--b.tes)
			BYTES=1 ;;
		-h|--help)
			usage
			exit 0 ;;
		-p|--proxy)
			if [[ -n "$(echo $2)" ]]; then
				PROXY=$(echo $2)
			else
				echo "Error: Empty value for -p, not using proxy" >&2
			fi
			shift ;;
		-q|--quiet)
			QUIET=1 ;;
		-r|--repeats)
			i=$(echo $2)
			# Check for integer
			if (( i / i )) &>/dev/null; then
				ITERATIONS=$i
			else
				echo "Error for -r (\"$2\"), using default" >&2
			fi
			unset i
			shift ;;
		-s|--site)
			if [[ -n "$(echo $2)" ]]; then
				REMOTE=$(echo $2)
			else
				echo "Error: Empty value for -s, using default" >&2
			fi
			shift ;;
		-u|--unit)
			i=$(echo $2)
			i=${i,,}
			if [[ "$i" =~ ^(n|k|m|g)$ ]]; then
				UNIT=$i
			else
				echo "Error for -u, using automatic unit" >&2
			fi
			unset i
			shift ;;
		--)
			break ;;
		*)
			echo "Error: Wrong parameter $1" >&2
			usage >&2
			exit 2 ;;
	esac
	shift
done

# Defaults to empty variables
REMOTE=${REMOTE:-$DEFAULT_SITE}
ITERATIONS=${ITERATIONS:-$ITERATIONS_DEFAULT}

# Check proxy string
if [[ -n "$PROXY" ]]; then
	# Check protocol
	if [[ ! "$PROXY" =~ :// ]]; then
		PROXY="http://$PROXY"
		[[ -z "$QUIET" ]] && echo "Adding protocol HTTP to proxy address"
	fi
	PROTO=${PROXY%%:*}
	PROTO=${PROTO,,}
	if [[ ! "$PROTO" =~ ^(https?|ftp)$ ]]; then
		echo "Error: Unknown protocol for proxy (\"${PROXY%%:*}\"), accepting only http(s) or ftp" >&2
		exit 1
	fi
	PROXY=${PROTO}:${PROXY#*:}
	# Check port
	if [[ ! "${PROXY##*:}" =~ [0-9]{2,} ]]; then
		echo 'Error: No port for proxy' >&2
		usage >&2
		exit 1
	fi
	# Set proxy
	for PRX in http https ftp; do
		declare -x "${PRX}_proxy=$PROXY"
	done
fi

# Bits or bytes?
if [[ ! $BYTES ]]; then
	WGET_PARAMS+=' --report-speed=bits'
	BYTES=b
else
	BYTES=B
fi

if [[ -z "$QUIET" ]]; then
	[[ $ITERATIONS -ne 1 ]] && S=s
	echo -n "Testing speed to $REMOTE over $ITERATIONS iteration$S"
	if [[ -n "$http_proxy" ]]; then
		echo "via proxy $http_proxy"
	else
		echo
	fi
fi

# Checking connectivity, use only host address (+ protocol)
REMOTE_ARR=( $(awk -F'/+' '{for (i=1;i<=NF;i++) {printf $i" "}} END {printf "\n"}'<<<$REMOTE) )
if [[ "${REMOTE_ARR[0]}" =~ tp.*:$ ]]; then
	REMOTE_TEST="${REMOTE_ARR[0]}//${REMOTE_ARR[1]}"
else
	REMOTE_TEST=${REMOTE_ARR[0]}
fi
wget $WGET_PARAMS -t 3 -T 1 -q $REMOTE_TEST
if [[ $? == 4 ]]; then
		echo "Error: Network unreachable" >&2
		exit 1
fi

# Speed test loop
set -o pipefail
for (( COUNTER=1; COUNTER <= $ITERATIONS; COUNTER++)); do
	SPEED=${SPEED:-0}
	if ! SPEED_CURRENT=$(wget $WGET_PARAMS -v $REMOTE 2>&1|awk -F'[)|(]' '/saved/ {print $2}'); then
		echo "Error while downloading $REMOTE, are the address and wget options ($WGET_PARAMS -v) correct?" >&2
		exit 1
	fi
	[[ -z "$SPEED_CURRENT" ]] && continue
	SPEED_NUM=${SPEED_CURRENT%% *}
	SPEED_DIM=${SPEED_CURRENT##* }
	SPEED_DIM=${SPEED_DIM:0:1}
	SPEED_DIM=${SPEED_DIM,,}
	if [[ -z "$SPEED_NUM" || -z "$SPEED_DIM" ]]; then
		echo "Oops, something went wrong. Received string: \"$SPEED_CURRENT\"" >&2
		exit 1
	fi
	E=${MAG[$SPEED_DIM]}
	E=${E:-0}
	SPEED=$(bc -l<<<"scale=6;($SPEED_NUM*1024^$E)+$SPEED")
done

if [[ ${SPEED%%.*} -le 0 ]]; then
	echo "Error in speed computation: \"$SPEED\"" >&2
	exit 1
fi

# Compute raw mean speed
SPEED=$(bc -l<<<"scale=4;${SPEED}/${ITERATIONS}")

# Set unit for output
if [[ $UNIT ]]; then
	case ${UNIT,,} in
		g|m)
			UNIT=${UNIT^^} ;;
		k)
			UNIT=${UNIT,,} ;;
		*)
			UNIT=n ;;
	esac
fi

if [[ ! $UNIT ]]; then
	if (( $[${SPEED%%.*}/1024/1024/1024] > 0 )); then
		UNIT=G
	elif (( $[${SPEED%%.*}/1024/1024] > 0 )); then
		UNIT=M
	elif (( $[${SPEED%%.*}/1024] > 0 )); then
		UNIT=k
	else
		UNIT=n
	fi
fi

E=${MAG[$UNIT]}
E=${E:-0}
[[ "$UNIT" == n ]] && unset UNIT

SPEED=$(bc -l<<<"scale=2;$SPEED/1024^$E")

if [[ -z "$QUIET" ]]; then
	echo "Mean speed: $SPEED ${UNIT}${BYTES}/s"
else
	echo "$SPEED ${UNIT}${BYTES}/s"
fi

# EOF
