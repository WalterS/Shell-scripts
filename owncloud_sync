#!/bin/bash

################################################################################
# owncloud_sync
#
# Wrapper for owncloudcmd, using a configuration file
#
# WS 2015-02-27
################################################################################

if [[ ! "${BASH_VERSINFO[0]}" -ge 4 ]]; then
	if [[ -z "${BASH_VERSINFO[0]}" ]]; then
		echo "Error: This script needs Bash as interpreter"
	else
		echo "Error: This script needs Bash >= version 4, reported version is \"${BASH_VERSINFO[0]}\"" >&2
	fi
	exit 1
fi
			
MY_NAME=${0##*/}

# Print help text
usage (){
cat <<END


$MY_NAME synchronises a local folder with ownCloud

Parameters: -c|--configuration
               Configuration file
            -u|--user
                Your ownCloud user name
            -p|--password
                Your ownCloud password
            -s|--server
                Server address
            -l|--local
                Local folder to synchronise
            -r|--remote
                Remote folder to synchronise
            -x|--exclude
                Path to exclusion list file
            -t|--trust
                Trust server certificate, even if invalid
            -n|--netrc
                Use ~/.netrc for authentication
            -h|--help
                You're looking at it

Parameters on the command line have precedence over the configuration file.

$MY_NAME looks for a configuration file in ~/.local/share/data/ownCloud/${MY_NAME}.cfg, locations can be specified with -f.
The standard exclusion list is /etc/ownCloud/sync-exclude.lst.

Configuration file format is one option per line: <long_option> <value>, e.g.
--user trusty
--password '!sec4r3$'

Example:
            $MY_NAME -u me -l ~/owncloud -s https://example.com/owncloud --remote=Documents -x /home/me/excusions.lst -t

END
}

# Parse configuration file
parse_config() {
[[ "$OC_DEBUG" -eq 1 ]] && echo "Running function $FUNCNAME" >&2
local IFS=$'\n'
for LINE in $(awk '/^[[:blank:]]*--[a-z]/{a=$1;$1="";a=a":"$0;gsub(/:[[:blank:]]+/,":",a);print a}' $OC_CONFIGURATION); do
	if [[ "$LINE" =~ ^--(trust|netrc|debug):$ ]]; then
		LINE="${LINE}1"
	fi
	if [[ -n "${LINE#*:}" ]]; then
		VAR=${LINE%%:*}
		VAR=${VAR##*-}
		VAR=${VAR^^}
		VAR=OC_${VAR##*-}
		VALUE=${LINE#*:}
		if [[ -z "${!VAR}" ]]; then
			eval $VAR=$VALUE
		fi

	fi
done
}


# Check for owncloudcmd
if ! which owncloudcmd &>/dev/null; then
	echo "Error: Could not find owncloudcmd in path" >&2
	exit 1
fi

# Get command line options
OPTIONS_LONG="help,user:,password:,server:,local:,remote:,exclude:,configuration:,trust,netrc,debug"
OPTIONS_SHORT="u:p:s:l:r:x:c:tnhd"
if ! PARSED_OPTIONS=$(getopt -qn "$0" -o "$OPTIONS_SHORT" -l "$OPTIONS_LONG" -- "$@"); then
	echo "Error: Invalid option"
	usage >&2
	exit 2
fi
OPTERR=0
eval set -- "$PARSED_OPTIONS"

while [[ $# -ge 1 ]]; do
	case $1 in
		-h|--help)
			usage
			exit 0 ;;
		-u|--user)
			OC_USER="$2"; shift ;;
		-p|--password)
			OC_PASSWORD="$2"; shift ;;
		-s|--server)
			OC_SERVER="$2"; shift ;;
		-l|--local)
			OC_LOCAL="$2"; shift ;;
		-r|--remote)
			OC_REMOTE="$2"; shift ;;
		-x|--exclude)
			OC_EXCLUDE="$2"; shift ;;
		-c|--configuration)
			OC_CONFIGURATION="$2"; shift ;;
		-P|--httpproxy)
			OC_HTTPPROXY="$2"; shift ;;
		-t|--trust)
			OC_TRUST=1;;
		-n|--netrc)
			OC_NETRC=1;;
		-d|--debug)
			OC_DEBUG=1;;
		--)
			break ;;
		*)
			echo "Error: Wrong parameter $1" >&2
			usage >&2
			exit 2 ;;
	esac
	shift
done

if [[ -n "$OC_CONFIGURATION" ]]; then
	if [[ ! -e "$OC_CONFIGURATION" ]]; then
		echo "Could not find configuration file $OC_CONFIGURATION" >&2
		exit 1
	fi
fi

OC_CONFIGURATION=${OC_CONFIGURATION:-~/.local/share/data/ownCloud/${MY_NAME}.cfg}

if [[ -e "$OC_CONFIGURATION" ]]; then
	parse_config
fi

if [[ $OC_DEBUG == 1 ]]; then
	echo "Parsed the following settings:" >&2
	set|awk '/^OC_/ {if (/^OC_PASSWORD/) {print "OC_PASSWDORD=********"} else {print $0}}' >&2
	echo >&2
fi

# Sanity check
declare -a VAR_MISSING
for VAR in OC_USER OC_PASSWORD OC_SERVER OC_LOCAL OC_REMOTE; do
	if [[ -z "${!VAR}" ]]; then
		VAR=${VAR#*_}
		VAR="--${VAR,,}"
		VAR_MISSING[${#VAR_MISSING[@]}]=${VAR#*_}
	fi
done

if [[ ${#VAR_MISSING[@]} -gt 0 ]]; then
	STR="options are"
	[[ ${#VAR_MISSING[@]} -eq 1 ]] && STR="option is"
	echo -e "Error: Can't continue, the following mandatory $STR missing:\n$(IFS=$'\n';echo "${VAR_MISSING[*]}")" >&2
	usage >&2
	exit 1
fi

OC_OPTIONS=()
if [[ -n "$OC_EXCLUDE" ]]; then
	if [[ -e "$OC_EXCLUDE" ]]; then
		OC_OPTIONS[${#OC_OPTIONS[@]}]="--exclude $OC_EXCLUDE"
	else
		echo "Warning: The specified exclusion file $OC_EXCLUDE does not exist" >&2
	fi
fi
OC_OPTIONS[${#OC_OPTIONS[@]}]="-u $OC_USER"
OC_OPTIONS[${#OC_OPTIONS[@]}]="-p $OC_PASSWORD"
[[ "$OC_TRUST" -eq 1 ]] && OC_OPTIONS[${#OC_OPTIONS[@]}]="--trust"
[[ -n "$OC_HTTPPROXY" ]] && OC_OPTIONS[${#OC_OPTIONS[@]}]="--httpproxy $OC_HTTPPROXY"
[[ "$OC_NETRC" -eq 1 ]] && OC_OPTIONS[${#OC_OPTIONS[@]}]="-n"
OC_OPTIONS[${#OC_OPTIONS[@]}]=$OC_LOCAL
OC_OPTIONS[${#OC_OPTIONS[@]}]="${OC_SERVER}/remote.php/webdav/${OC_REMOTE}"

RC=0
if [[ $OC_DEBUG == 1 ]]; then
	echo "owncloudcmd -s ${OC_OPTIONS[*]}"
	owncloudcmd --non-interactive -s ${OC_OPTIONS[*]}
	RC=$?
else
	owncloudcmd --non-interactive -s ${OC_OPTIONS[*]} &>/dev/null
	RC=$?
fi

if [[ $RC != 0 ]]; then
	echo "Error: owncloudcmd failed" >&2
	if [[ $OC_DEBUG != 1 ]]; then
		echo "You might want to run $MY_NAME with --debug to see where the error occurs" >&2
	fi
fi

exit $RC

# EOF

