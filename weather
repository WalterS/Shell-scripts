#!/bin/bash

################################################################################
# weather
#
# Get sensor data from USB receiver USB-WDE1
#
# WS 20140119
################################################################################

########### Configure here ###########
# Sensor channels and names
CHANNELS[1]="outdoors"
CHANNELS[2]="study"
CHANNELS[3]="sleeping room"

# Mail address for error messages
MAIL_ADD='nn@nn.nn'

# Path to RRD and log file
RRD=~/doc/weather/weather.rrd
LOG=~/doc/weather/${0##*/}.errlog

######### Configuration end ##########

TDIFF=20        # Min. seconds between updates
FIELDS_TOTAL=25 # Total no. of data fields
WAIT=10         # Send mail only on every n consecutive error
ERRORCOUNT=0
DATE=0
DATE_OLD=0
unset PLURAL PORT
declare -a FAILURES INPUT DATA
IFS=':'

# We want to exit cleanly
trap 'pkill socat' 0

# Get USB port
PORT=$(dmesg | awk '/cp210x converter now attached to tty/ {port=$NF} END {print "/dev/"port}')
if [[ ! $PORT =~ ^/dev/tty.*$ ]]; then
	PORT=$(udevadm info --export-db 2>/dev/null|awk -F'=' '/^S:.*Silicon_Labs_ELV_USB/,/DEVPATH=/ {if (/DEVNAME=/) {print $NF;exit}}')
fi
if [[ $PORT =~ ^/dev/$ ]]; then
	PORT='/dev/ttyUSB0'
	echo "Error: No suitable USB port found, trying $PORT" >&2
fi

# Send mail on errors
send_mail_() {
echo "$(date -d @$DATE '+%Y-%m-%d %H:%M:%S'): Error: $ERROR #${ERRORCOUNT}" | tee -a "$LOG"
if [[ $ERROR_TMP -lt $WAIT ]]; then
	return
fi
ERROR_TMP=0
##TEMP
return

mail -s "Error on temperature reading" $MAIL_ADD<<END
$(date -d @$DATE '+%Y-%m-%d %H:%M:%S')

$ERROR
END

if [[ $? -ne 0 ]]; then
	echo "$(date '+%Y-%m-%d %H:%M:%S'): Error: could not send error mail" | tee -a "$LOG"
else
	echo "$(date '+%Y-%m-%d %H:%M:%S'): Sent error mail" | tee -a "$LOG"
fi
unset ERROR
}

CMD="socat ${PORT},b9600 STDOUT"

# Connect to serial port
eval "$CMD" | \
while IFS=';' read -a INPUT; do
	DATE=$(date '+%s')
	if [[ "$INPUT" != '$1' ]]; then
		sleep 1
		continue
	fi
	[[ $((DATE - DATE_OLD)) -lt $TDIFF ]] && continue
	DATE_OLD=$DATE
	# Check total number of fields
	if [[ ${#INPUT[@]} -ne $FIELDS_TOTAL ]]; then
		ERROR="Got ${#INPUT[@]} fields instead of ${FIELDS_TOTAL}."
		((ERRORCOUNT++))
		((ERROR_TMP++))
		send_mail_
		continue
	fi
	# Cut first, second and last field
	n=0
	for n in $((${#INPUT[@]}-1)) 0 1; do
		unset "INPUT[$n]"
	done
	DATA=("${INPUT[@]}")
	DATA[0]=$DATE
	DATA=("${DATA[@]/,/.}")
	# Check for missing sensor data
	FAILURES=()
	n=0
	for n in ${!CHANNELS[*]}; do
		if [[ -z "${DATA[$n]}" || -z "${DATA[$((n+8))]}" ]]; then
			# Add capitalised location name to array
			FAILURES[${#FAILURES[@]}]="${CHANNELS[$n]^}"
		fi
	done
	if [[ ${#FAILURES[@]} -gt 0 ]]; then
		if [[ ${#FAILURES[@]} -gt 1 ]]; then
			PLURAL="s"
		else
			unset PLURAL
		fi
		ERROR="Sensor failure in ${#FAILURES[@]} location${PLURAL}: $(sed 's/'"$IFS"'/, /g'<<<"${FAILURES[*]^}")."
		((ERRORCOUNT++))
		((ERROR_TMP++))
		send_mail_
	fi
	# Replace unused fields with "U"
	n=0
	for VAR in "${DATA[@]}"; do
		[[ -z "$VAR" ]] && DATA[$n]="U"
		((n++))
	done
	[[ "${DATA[-2]}" == "U" ]] && DATA[$((${#DATA[@]}-1))]="U"
	echo "$(date -d "@$DATE" '+%Y-%m-%d %H:%M:%S'): ${DATA[*]}"
	# Write to RRD file
	if ! rrdtool update "$RRD" "${DATA[*]}" 2>>"$LOG"; then
		echo "${DATA[*]}" >> "$LOG"
		((ERRORCOUNT++))
		((ERROR_TMP++))
		ERROR="Could not update $RRD"
		send_mail_
		continue
	fi
	# Reset error counter on successful run
	[[ $ERROR_TMP == 0 ]] && ERRORCOUNT=0
done

# EOF
